#pragma kernel generate_texture
#pragma kernel blur

#define PI 3.14159265358979323846;

RWTexture2D<uint> buffer;
RWTexture2D<float> radar_texture;
RWTexture2D<float> blur_texture;
RWBuffer<float> output_buffer;


float color_norm_const;
float2 cam_angle;
uint cam_width, cam_height;
uint texture_width, texture_height;
uint buffer_height;
uint x_shift;
int2 blurxy;

[numthreads(8,8,1)]
void generate_texture(uint3 id: SV_DispatchThreadID)
{
    const float pi = PI;
    const float angle = 1.0 * id.x / texture_width * 2 * pi;
    const int angle_id = cam_width / 2 + tan(angle - cam_angle.x / 2) / tan(cam_angle.x / 2) / 2 * cam_width;
    const float y = 1.0 * id.y / texture_height * buffer_height;

    int y1 = y;
    int y2 = y1 + 1;
    uint x = (x_shift + angle_id + texture_width) % texture_width;
    const float val = (y - y1) * buffer[uint2(x, y1)] + (y2 - y) * buffer[uint2(x, y2)];
    radar_texture[uint2(x_shift + id.x, id.y)] = color_norm_const * val / (1000000000.0 / cam_height);
}

[numthreads(8,8,1)]
void blur(uint3 id: SV_DispatchThreadID)
{
    const int x = (x_shift + id.x) % texture_width;
    const uint2 pixel_id = uint2(x, id.y);
    blur_texture[pixel_id] = 0;
    for (int dx = -blurxy.x; dx <= blurxy.x; dx++)
    {
        for (int dy = -blurxy.y; dy <= blurxy.y; dy++)
        {
            uint nx = (x + dx + texture_width) % texture_width;
            blur_texture[pixel_id] += radar_texture[uint2(nx, id.y + dy)];
        }
    }
    blur_texture[pixel_id] /= (2 * blurxy.x + 1) * (2 * blurxy.y + 1);
    output_buffer[id.x * cam_width + id.y] = blur_texture[pixel_id];
}